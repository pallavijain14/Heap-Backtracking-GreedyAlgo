public class Solution {
  static PriorityQueue < Integer > max_heap;
  static PriorityQueue < Integer > min_heap;
  public int[] solve(int[] A) {
    min_heap = new PriorityQueue();
    max_heap = new PriorityQueue(new CustomComp());
    int n = A.length;
    int[] ans = new int[n];
    for (int i = 0; i < n; ++i) {
      add(A[i]);
      ans[i] = get_median();
    }

    return ans;
  }

  public static int get_median() {
    int total = min_heap.size() + max_heap.size();
    int ret;
    if (total % 2 == 1) {
      if (max_heap.size() > min_heap.size())
        ret = max_heap.peek();
      else
        ret = min_heap.peek();
    } else {
      ret = Integer.MAX_VALUE;
      if (max_heap.size() != 0)
        ret = Math.min(ret, max_heap.peek());
      if (min_heap.size() != 0)
        ret = Math.min(ret, min_heap.peek());
    }
    return ret;
  }
  public static void add(int a) {
    if (max_heap.size() != 0 && (a >= max_heap.peek()))
      min_heap.offer(a);
    else
      max_heap.offer(a);

    if (Math.abs(max_heap.size() - min_heap.size()) > 1) {
      if (max_heap.size() > min_heap.size()) {
        int temp = max_heap.peek();
        max_heap.poll();
        min_heap.offer(temp);
      } else {
        int temp = min_heap.peek();
        min_heap.poll();
        max_heap.offer(temp);
      }
    }
  }

}
class CustomComp implements Comparator < Integer > {
  @Override
  public int compare(Integer a, Integer b) {
    return b - a;
  }
}
