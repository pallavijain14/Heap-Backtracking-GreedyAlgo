public class Solution {
  static PriorityQueue < Integer > maxHeap;
  static PriorityQueue < Integer > minHeap;
  public int solve(int[] A) {
    int n = A.length;
    minHeap = new PriorityQueue();
    maxHeap = new PriorityQueue(new CustomComp());
    for (int i = 0; i < (n - 1); i++) {
      add_number(A[i]);
      if (A[i + 1] == find_median()) return 1;
    }
    minHeap = new PriorityQueue();
    maxHeap = new PriorityQueue(new CustomComp());
    for (int i = n - 1; i > 0; i--) {
      add_number(A[i]);
      if (A[i - 1] == find_median()) return 1;
    }
    return 0;
  }
  public static void add_number(int num) {
    maxHeap.offer(num);
    minHeap.offer(maxHeap.peek());
    maxHeap.poll();
    if (maxHeap.size() < minHeap.size()) {
      maxHeap.offer(minHeap.peek());
      minHeap.poll();
    }
  }
  public static int find_median() {
    if (maxHeap.size() > minHeap.size()) return maxHeap.peek();
    else {
      int ans = maxHeap.peek() + minHeap.peek();
      if (ans % 2 != 0) return Integer.MAX_VALUE; //answer is a fraction
      else return ans / 2;
    }
  }
}
class CustomComp implements Comparator < Integer > {
  @Override
  public int compare(Integer a, Integer b) {
    return b - a;
  }
}
